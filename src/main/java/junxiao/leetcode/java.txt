collectin:
myColection.stream().filter().forEach().collect(Collectors.toList())
for (Object o : collection)
    System.out.println(o);

public interface Iterator<E>{
    bollean hasNext();
    E next();
    void remove();
}
 for (Iterator<?> it = c.iterator(); it.hasNext();){
    n = it.next();
 }
 Collections.sort(List<T> list)
 Collections.reverse(List)

-----------------------------------------------------------------
HashMap:
-----------------------------------------------------------------
get(K), return null if not existed;
containsKey(K)
containsValue(V)
put(K,V)
remove(K)
remove by value:
map.values().remove(removeValue);
Collection<V> values();// return collection because values may duplicate
Set<K> keySet();//key is unique
-----------------------------------------------------------------
-----------------------------------------------------------------

-----------------------------------------------------------------
Stack: use Deque instead, stack extent vector, no interface
-----------------------------------------------------------------
stack.put(E)
E stack.pop()
E stack.peek();
Deque<Integer> stack_Deq = new ArrayDeque<>();
stack_Deq.addFirst(E)
E stack_Deq.removeFirst()
E stack_Deq.peekFirst()
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
list: (Vector is synchronized, use ArrayList instead)
-----------------------------------------------------------------
list.add
list.addAll(list2)
list.remove(list.size()-1)
list.get(ind)
list.set(ind, E)
list.size()
list<Integer> r = new ArrayList<>(Arrays.asList(1,2,3));
to copy list: list.stream().collect(Collectors.toList())
list.sublist(begin,end), return VIEW of list[begin,end-1]
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
queue   ||last ... ... first||
-----------------------------------------------------------------
Deque<Integer> queue = new ArrayDeque<>();
queue.add(E)
E queue.remove()
E queue.peek() return null if empty
arrayDeque better than linkedlist because no memory allocation when
add new node, linkedlist is better if delete during iteration
-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
String
-----------------------------------------------------------------
charAt(ind), charAt will check the bound, in c++, operator[]will not check boundary!!
toCharArray();
Character.isDigit;
Character.isLetter;
Character.isDigitOrLetter;
String.valueOf(char[] c).
how to sort string: char[] c = s.toCharArray(); Arrays.sort(c); String sorted=String.valueOf(c);
length()
substring(begin,end)
join(" ", str)
StringBuilder: append, toString,setLength()
String r = new StringBuilder(res).reverse().toString();
to check equal:
str.equals(e), str == "e" will only check whether they are the same reference
// from char to string
String.valueOf(Object)
Integer.valueOf(str) str to int
-----------------------------------------------------------------
-----------------------------------------------------------------

-----------------------------------------------------------------
Arrays:
-----------------------------------------------------------------
Arrays.fill(ary, val)
Arrays.asList(arr) // transform array to list
Arrays.copyOf(arr) //will create a new arr
System.arrayCopy(src,ind,des,ind,len) //will not create new arr
Arrays.copyOfRange(arr,int,end)
-----------------------------------------------------------------
-----------------------------------------------------------------

-----------------------------------------------------------------
Array:
-----------------------------------------------------------------
int[] res = new int[10];
int[] res = {1,2,3}
array.length //not, variable, not function
array.clone()// create a new array
// List<Integer> to int[]
int[] num = list.stream().mapToInt(i -> i).toArray();
String[] str = list.stream().toArray(String::new);
-----------------------------------------------------------------
-----------------------------------------------------------------

-----------------------------------------------------------------
Math
-----------------------------------------------------------------
Math.max()
Math.ceil()
Math.floor()
Integer.MIN_VALUE
-----------------------------------------------------------------
-----------------------------------------------------------------



-----------------------------------------------------------------
Misc
-----------------------------------------------------------------
cast: (int) long_val;
>> sign shift
>>> unsign shift
-----------------------------------------------------------------
    Arrays.sort(str, new MyComparator());
	private class MyComparator implements Comparator<String>{
		@Override
		public int compare(String o1, String o2) {
			// TODO Auto-generated method stub
			String str = o2+o1;
			return str.compareTo(o1+o2);
		}
	}
	private class MyComparator implements Comparator<String>{
		@Override
		public int compare(String o1, String o2) {
			// TODO Auto-generated method stub
			String str = o2+o1;
			return str.compareTo(o1+o2);
		}
	}
-----------------------------------------------------------------

